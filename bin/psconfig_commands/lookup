#!/usr/bin/perl

=head1 NAME
 
lookup - creates a pSConfig template include file from queries to the perfSONAR lookup service.

=head1 SYNOPSIS
 
maddash-check-plugin [options]
 
 Options:
   -h | --help          Help message
   --file FILE          The configuration file to read. Default is /etc/perfsonar/psconfig/lookup.json.
   -o | --output FILE   file to output generated include file. Uses stdout if not defined.
   -q | --quiet         suppress output to stdout and stderr
   -v | --verbose       enable debugging output

=head1 OPTIONS
 
=over 8
 
=item B<-h | --help>
 
Prints a help message and exits

=item B<--file FILE>
 
The configuration file to read. Default is /etc/perfsonar/psconfig/lookup.json. The file 
takes a specific format as defined in the schema file at 
/usr/share/doc/perfsonar/psconfig/psconfig-lookup-schema.json.

=item B<-o | --output FILE>
 
The path to the file 

=item B<--quiet>
 
Suppress output to stdout and stderr

=item B<--verbose>
 
Enable debugging output
   
=back

=head1 DESCRIPTION
 
B<This program> creates a pSConfig template include file from queries to the 
perfSONAR lookup service. The queries are defined in a configuration file that takes the 
format defined by the schema at /usr/share/doc/perfsonar/psconfig/psconfig-lookup-schema.json. 
The resulting file contains address objects and associated archivers, contexts, and hosts.
It is not a complete template, but can be included in one that defines groups, tests and 
tasks using the "include" directive.
 
=cut
use strict;
use warnings;

use FindBin qw($Bin);
use lib "$Bin/../../lib";

use Getopt::Long qw(GetOptions);
use JSON qw( from_json to_json );
use Pod::Usage;

use perfSONAR_PS::Client::LS::PSQueryObjects::PSInterfaceQueryObject;
use perfSONAR_PS::Client::LS::PSQueryObjects::PSServiceQueryObject;
use perfSONAR_PS::Client::PSConfig::Config;
use perfSONAR_PS::PSConfig::CLI::Lookup::LookupConnect;
use perfSONAR_PS::Utils::LookupService qw ( discover_lookup_services  );

use SimpleLookupService::Client::SimpleLS;
use SimpleLookupService::Client::Query;

use Data::Dumper;

my $CONFIG_FILE="/etc/perfsonar/psconfig/lookup.json";

#parse options
my $help;
my $file_opt;
my $output_file;
my $quiet_opt;
my $verbose_opt;
GetOptions(
    'help|h' => \$help,
    'file=s' => \$file_opt,
    'output|o=s' => \$output_file,
    'quiet|q' => \$quiet_opt,
    'verbose|v' => \$verbose_opt,
) or pod2usage({ -verbose => 0, -exitval => 2 });

#parse arguments
if($help){
    pod2usage({ -exitval => 0, -verbose => 2, -noperldoc => 1});
}elsif($quiet_opt && $verbose_opt){
    my $exitval = 2;
    pod2usage({
        -message => "You cannot specify both -q and -v simultaneously.",
        -exitval => $exitval,
        -verbose => 0   
    });
    exit $exitval;
}elsif(@ARGV > 0){
    my $exitval = 2;
    pod2usage({
        -message => "No arguments accepted by this command",
        -exitval => $exitval,
        -verbose => 0   
    });
    exit $exitval;
}

#get file if non-standard
if($file_opt){
    $CONFIG_FILE=$file_opt;
}

#load file
my ($lookup_conf_client, $lookup_conf) = _load_config($CONFIG_FILE);
exit 1 unless($lookup_conf);

#get URLS from bootstrap file if not specified
unless($lookup_conf->ls_urls() && @{$lookup_conf->ls_urls()}){
    my $ls_infos = discover_lookup_services();
    foreach my $ls_info(@{$ls_infos}){
        $lookup_conf->add_ls_url($ls_info->{'locator'});
    }
}
#if still no LSes then exit
unless($lookup_conf->ls_urls() && @{$lookup_conf->ls_urls()}){
    _error("Unable to find any lookup services.");
    exit 1;
}

#init LS client(s)
_debug("Lookup Service servers to contact:");
my @ls_clients = ();
foreach my $ls_url(@{$lookup_conf->ls_urls()}){
    my $ls_connection = SimpleLookupService::Client::SimpleLS->new();
    my $uri = URI->new($ls_url); 
    my $ls_port =$uri->port();
    if(!$ls_port &&  $uri->scheme() eq 'https'){
        $ls_port = 443;
    }elsif(!$ls_port){
        $ls_port = 80;
    }
    _debug("    " . $uri->host());
    
    $ls_connection->init( host=> $uri->host(), port=> $ls_port );
    my $ls_client = SimpleLookupService::Client::Query->new();
    $ls_client->init( { server => $ls_connection } );
    push @ls_clients, $ls_client;
}

#iterate through queries
my $psconfig = new perfSONAR_PS::Client::PSConfig::Config();
foreach my $config_query_name(@{$lookup_conf->query_names()}){
    my $config_query = $lookup_conf->query($config_query_name);
    
    _debug("\nPerforming query $config_query_name of type " . $config_query->record_type());
    
    #determine service type and build LS request
    my $ls_query;
    if($config_query->record_type() eq 'service'){
        $ls_query = new perfSONAR_PS::Client::LS::PSQueryObjects::PSServiceQueryObject;
    }elsif($config_query->record_type() eq 'host'){
        $ls_query = new perfSONAR_PS::Client::LS::PSQueryObjects::PSHostQueryObject;
    }elsif($config_query->record_type() eq 'interface'){
        $ls_query = new perfSONAR_PS::Client::LS::PSQueryObjects::PSInterfaceQueryObject;
    }else{
        _error("Skipping unrecognized record type " . $config_query->record_type());
        next;
    }
    #add filters
    foreach my $filter_name(@{$config_query->filter_names()}){
        $ls_query->addField({'key' => $filter_name, 'value' => $config_query->filter($filter_name) });
    }
    
    #send LS request
    foreach my $ls_client(@ls_clients){
        _debug("Records from server " . $ls_client->{SERVER}->getHost() . ":");
        my ($resCode, $res) = $ls_client->query($ls_query);
        unless($resCode == 0){
            _error("Error performing query. Moving to next query. Error was: " . $res->{message});
            next;
        }
        foreach my $ls_result(@{$res}){
            #extract host from URL based on type
            if($config_query->record_type() eq 'service'){                
                #skip records without locators
                eval{ $ls_result->getServiceLocators(); };
                next if($@);
                foreach my $service_url(@{$ls_result->getServiceLocators()}){
                    #determine address
                    $service_url =~ s|^.+://|http://|; #hack to get URI to recognize URL
                    my $address;
                    eval{ $address = URI->new($service_url)->host() };
                    next if($@); #skip malformed URLs
                    &_build_address($address, $config_query_name, $psconfig, $config_query->output());
                    _debug("    $address");
                } 
            }elsif($config_query->record_type() eq 'host'){
                #skip records without addresses
                eval{ $ls_result->getHostName(); };
                next if($@);
                foreach my $hostname(@{$ls_result->getHostName()}){
                    #determine address
                    &_build_address($hostname, $config_query_name, $psconfig, $config_query->output());
                    _debug("    $hostname");
                } 
            }elsif($config_query->record_type() eq 'interface'){
                #skip records without addresses
                eval{ $ls_result->getInterfaceAddresses(); };
                next if($@);
                foreach my $address(@{$ls_result->getInterfaceAddresses()}){
                    #determine address
                    &_build_address($address, $config_query_name, $psconfig, $config_query->output());
                    _debug("    $address");
                } 
                
            }else{
                #skip other record types
                next;
            }
        }
    }
    
    #we made it this far, so add archives and contexts
    next unless($config_query->output());
    
    #archives
    foreach my $archive_name(@{$config_query->output()->archive_names()}){
        my $normalized_name = &_normalize($config_query_name, $archive_name);
        $psconfig->archive($normalized_name, $config_query->output()->archive($archive_name));
    }
    
    #contexts
    foreach my $context_name(@{$config_query->output()->context_names()}){
        my $normalized_name = &_normalize($config_query_name, $context_name);
        $psconfig->context($normalized_name, $config_query->output()->context($context_name));
    }
}

  
#exit
if($output_file){
    &save_file($psconfig, $output_file, {"pretty" => 1, "canonical" => 1});
    _output("Include file generated. Result saved in file $output_file.");
}else{
    _output($psconfig->json({"pretty" => 1, "canonical" => 1}));
}
exit 0;

#Subroutines
sub _output{
    my $msg = shift;
    print "$msg\n" if($msg && !$quiet_opt);
}

sub _error{
    my $msg = shift;
    print STDERR "$msg\n" unless($quiet_opt);
}

sub _debug{
    my $msg = shift;
    print "$msg\n" if($verbose_opt  && !$quiet_opt);
}

sub _build_address() {
    my ($address, $config_query_name, $psconfig, $output) = @_;
    my $address_name = &_normalize($config_query_name, $address);
    #if address already created then return
    if($psconfig->address($address_name)){
        return;
    }
    
    my $address_obj = new perfSONAR_PS::Client::PSConfig::Addresses::Address();
    $address_obj->address($address);
    $address_obj->tags($output->tags());
    $address_obj->no_agent($output->no_agent()) if($output->no_agent());
    $address_obj->psconfig_meta($output->psconfig_meta());
    $address_obj->context_refs(_normalize_list($config_query_name, $output->context_names())) if(@{$output->context_names()});
    if(@{$output->archive_names()}){
        my $host = new perfSONAR_PS::Client::PSConfig::Host();
        $host->archive_refs(_normalize_list($config_query_name, $output->archive_names()));
        $psconfig->host($address_name, $host);
        $address_obj->host_ref($address_name);
    }
    $psconfig->address($address_name, $address_obj);
}

sub _normalize {
    my ($prefix, $local_name) = @_;
    return $prefix . '__' . $local_name;
}

sub _normalize_list {
    my ($prefix, $local_names) = @_;
    my @tmp = ();
    foreach my $local_name(@{$local_names}){
        push @tmp, _normalize($prefix, $local_name);
    }
    
    return \@tmp;
}

sub _load_config {
    my ($config_file) = @_;
    
    ##
    #load config file
    my $lookup_conf_client = new perfSONAR_PS::PSConfig::CLI::Lookup::LookupConnect(
        url => $config_file,
        save_filename => $config_file
    );
    if($lookup_conf_client->error()){
        _error("Error opening $config_file: " . $lookup_conf_client->error());
        return;
    } 
    my $lookup_conf = $lookup_conf_client->get_config();
    if($lookup_conf_client->error()){
        _error("Error parsing $config_file: " . $lookup_conf_client->error());
        return;
    }
    my @lookup_conf_errors = $lookup_conf->validate();
    if(@lookup_conf_errors){
        my $err = "$config_file is not valid. The following errors were encountered: \n";
        foreach my $error(@lookup_conf_errors){
            $err .= "    JSON Path: " . $error->path . "\n";
            $err .= "    Error: " . $error->message . "\n";
        }
        _error($err);
        return;
    }
    
    return ($lookup_conf_client, $lookup_conf);
}

sub save_file() {
    my ($agent_json, $filename, $formatting_params) = @_;
    $formatting_params = {} unless $formatting_params;
    chomp $filename;
    $filename =~ s/^file:\/\///g;
    unless($filename) {
        _error("No save_filename set");
        exit 2;
    }
    eval{
        open(my $fh, ">:encoding(UTF-8)", $filename) or die("Can't open $filename: $!");
        print $fh $agent_json->json($formatting_params);
        close $fh;
    };
    if($@){
        _error("Error saving $filename: $@\n");
        exit 2;
    }
}