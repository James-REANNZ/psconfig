#!/usr/bin/perl

=head1 NAME
 
cache-clear - Clears JSON template cache maintained by agents
 
=head1 SYNOPSIS
 
cache-clear [options] [agent]
 
 Options:
   -h | --help      Help message
   -f|--file FILE   The agent configuration file to read. Defaults to standard location if unspecified.
   --quiet          Suppress output to stdout and stderr
=head1 ARGUMENTS

=over 8

=item B<agent>
 
Optional name of the agent to which to apply this command. Agents may share cache 
directory depending on configuration, so clearing for one may laso do it for the other.

=back

=head1 OPTIONS
 
=over 8
 
=item B<-h | --help>
 
Prints a help message and exits

=item B<-f|--file FILE>
 
The agent configuration file to read. Defaults to standard location if unspecified.

=item B<--quiet>
 
Suppress output to stdout and stderr

=back
 
=head1 DESCRIPTION
 
B<This program> will clear the JSON template cache maintained by the specified
agent. The agent only uses the cache if it cannot reach the JSON template by 
normal means. By default, the cache expires all data. If you would like to remove
an item for the cache prior to its expiration, this command serves that function.
 
=cut
use strict;
use warnings;

use FindBin qw($Bin);
use lib "$Bin/../../lib";

use Getopt::Long qw(GetOptions);
use JSON qw( from_json to_json );
use Module::Load;
use Pod::Usage;
use CHI;

use perfSONAR_PS::PSConfig::CLI::Constants;

#parse options
my $help;
my $file_opt;
my $quiet_opt;
GetOptions(
    'help|h' => \$help,
    'f|file=s' => \$file_opt,
    'quiet' => \$quiet_opt,
) or pod2usage({ -verbose => 0, -exitval => 2 });

#parse arguments
if($help){
    pod2usage({ -exitval => 0, -verbose => 2, -noperldoc => 1});
}

my $agent_name = "";
if(@ARGV > 0){
    $agent_name = lc(shift @ARGV);
    chomp $agent_name;
}

#see if file exists if given
if($file_opt && ! -e $file_opt){
    _error("File $file_opt does not exist");
    exit 2;
}

#make sure we have a valid agent
my $cli_agent = {};
my $agent_found = 0;
my @valid_agents = ();
foreach my $cli_agent(@{perfSONAR_PS::PSConfig::CLI::Constants::CLI_AGENTS()}){
    my $config_file = $file_opt ? $file_opt : $cli_agent->{config_file};
    unless(-e $config_file){
        next;
    }
    push @valid_agents, lc($cli_agent->{name});
    if($agent_name && $agent_name eq lc($cli_agent->{name})){
        $agent_found = 1;
    }elsif($agent_name){
        next;
    }
    my ($agent_conf_client, $agent_conf) = _load_config($config_file, $cli_agent->{client_class}, $cli_agent->{name});
    exit 1 if(!$agent_conf_client);
    
    #clear the cache
    my $cache_dir = $agent_conf->cache_directory() ? $agent_conf->cache_directory() : $cli_agent->{default_cache_dir};
    my $template_cache = CHI->new( 
        driver => 'File', 
        root_dir => $cache_dir, 
    );
    eval{
        $template_cache->clear();
    };
    if($@){
        _error("Unable to clear cache: " . $@);
        exit 1;
    }
    
}
if($agent_name && !$agent_found){
    _error("Invalid agent '$agent_name' specified. Valid values are:\n");
    foreach my $valid_agent(@valid_agents){
        _error("$valid_agent");
    }
    exit 2;
}

_success("Successfully cleared cache");

exit 0;

#Subroutines
sub _success{
    my $msg = shift;
    print "$msg\n" if($msg && !$quiet_opt);
}

sub _error{
    my ($msg, $cli_agent_name) = @_;
    print STDERR "$cli_agent_name\n" if($cli_agent_name && !$quiet_opt);
    print STDERR "$msg\n" unless($quiet_opt);
}

sub _load_config {
    my ($config_file, $config_class, $cli_agent_name) = @_;
    
    ##
    # Load client class
    eval{
        load  $config_class;
    };
    if($@){
        _error("\n[$cli_agent_name agent] It does not appear the agent is full installed. You may want to reinstall.");
        return;
    }
    
    ##
    #load config file
    my $agent_conf_client = $config_class->new(
        url => $config_file,
        save_filename => $config_file
    );
    if($agent_conf_client->error()){
        _error("Error opening $config_file: " . $agent_conf_client->error(), $cli_agent_name);
        return;
    } 
    my $agent_conf = $agent_conf_client->get_config();
    if($agent_conf_client->error()){
        _error("Error parsing $config_file: " . $agent_conf_client->error(), $cli_agent_name);
        return;
    }
    my @agent_conf_errors = $agent_conf->validate();
    if(@agent_conf_errors){
        my $err = "Unable to load $config_file because it is not valid. The following errors were encountered: \n";
        foreach my $error(@agent_conf_errors){
            $err .= "    JSON Path: " . $error->path . "\n";
            $err .= "    Error: " . $error->message . "\n";
        }
        _error($err, $cli_agent_name);
        return;
    }
    
    return ($agent_conf_client, $agent_conf);
}
