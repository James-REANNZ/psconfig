../lib/perfSONAR_PS/MeshConfig/Generators/MaDDash.pm:            unless ($test->parameters->type eq "perfsonarbuoy/bwctl" or $test->parameters->type eq "perfsonarbuoy/owamp") {
../lib/perfSONAR_PS/MeshConfig/Generators/MaDDash.pm:                $logger->debug("Skipping: ".$test->parameters->type);
../lib/perfSONAR_PS/MeshConfig/Generators/MaDDash.pm:            if ($test->disabled) {
../lib/perfSONAR_PS/MeshConfig/Generators/MaDDash.pm:                $logger->debug("Skipping disabled test: ".$test->description);
../lib/perfSONAR_PS/MeshConfig/Generators/MaDDash.pm:            unless ($test->parameters->type eq "perfsonarbuoy/bwctl" or $test->parameters->type eq "perfsonarbuoy/owamp") {
../lib/perfSONAR_PS/MeshConfig/Generators/MaDDash.pm:                $logger->debug("Skipping: ".$test->parameters->type);
../lib/perfSONAR_PS/MeshConfig/Generators/MaDDash.pm:            if ($test->disabled) {
../lib/perfSONAR_PS/MeshConfig/Generators/MaDDash.pm:                $logger->debug("Skipping disabled test: ".$test->description);
../lib/perfSONAR_PS/MeshConfig/Generators/MaDDash.pm:            if ($test->description) {
../lib/perfSONAR_PS/MeshConfig/Generators/MaDDash.pm:                $grid_name .= $test->description;
../lib/perfSONAR_PS/MeshConfig/Generators/MaDDash.pm:            if ($test->members->type eq "star") {
../lib/perfSONAR_PS/MeshConfig/Generators/MaDDash.pm:                $test->members->center_address(__normalize_addr($test->members->center_address));
../lib/perfSONAR_PS/MeshConfig/Generators/MaDDash.pm:                push @row_members, $test->members->center_address;
../lib/perfSONAR_PS/MeshConfig/Generators/MaDDash.pm:                foreach my $member (@{__normalize_addrs($test->members->members)}) {
../lib/perfSONAR_PS/MeshConfig/Generators/MaDDash.pm:                    push @column_members, $member unless $member eq $test->members->center_address;
../lib/perfSONAR_PS/MeshConfig/Generators/MaDDash.pm:            elsif ($test->members->type eq "disjoint") {
../lib/perfSONAR_PS/MeshConfig/Generators/MaDDash.pm:                foreach my $a_member (@{__normalize_addrs($test->members->a_members)}) {
../lib/perfSONAR_PS/MeshConfig/Generators/MaDDash.pm:                foreach my $b_member (@{__normalize_addrs($test->members->b_members)}) {
../lib/perfSONAR_PS/MeshConfig/Generators/MaDDash.pm:            elsif ($test->members->type eq "ordered_mesh") {
../lib/perfSONAR_PS/MeshConfig/Generators/MaDDash.pm:                foreach my $member (@{__normalize_addrs($test->members->members)}) {
../lib/perfSONAR_PS/MeshConfig/Generators/MaDDash.pm:                foreach my $pair (@{ $test->members->source_destination_pairs }) {
../lib/perfSONAR_PS/MeshConfig/Generators/MaDDash.pm:             foreach my $pair( @{ $test->members->source_destination_pairs }) {
../lib/perfSONAR_PS/MeshConfig/Generators/MaDDash.pm:            foreach my $pair (@{ $test->members->source_destination_pairs }) {
../lib/perfSONAR_PS/MeshConfig/Generators/MaDDash.pm:            foreach my $pair (@{ $test->members->source_destination_pairs }) {
../lib/perfSONAR_PS/MeshConfig/Generators/MaDDash.pm:                my $ma = $host->lookup_measurement_archive({ type => $test->parameters->type, recursive => 1 });
../lib/perfSONAR_PS/MeshConfig/Generators/MaDDash.pm:                if($test->parameters->ipv4_only || is_ipv4($src_addr) || is_ipv4($dst_addr)){
../lib/perfSONAR_PS/MeshConfig/Generators/MaDDash.pm:                }elsif($test->parameters->ipv6_only || is_ipv6($src_addr) || is_ipv6($dst_addr)){
../lib/perfSONAR_PS/MeshConfig/Generators/MaDDash.pm:                my $enable_combined_graphs = __get_check_option({ option => "enable_combined_graphs", test_type => $test->parameters->type, grid_name => $grid_name, maddash_options => $maddash_options });
../lib/perfSONAR_PS/MeshConfig/Generators/MaDDash.pm:                my $graph_url = __get_check_option({ option => "graph_url", test_type => $test->parameters->type, grid_name => $grid_name, maddash_options => $maddash_options });
../lib/perfSONAR_PS/MeshConfig/Generators/MaDDash.pm:                    if($test->parameters->ipv6_only){
../lib/perfSONAR_PS/MeshConfig/Generators/MaDDash.pm:                    }elsif($test->parameters->ipv4_only){
../lib/perfSONAR_PS/MeshConfig/Generators/MaDDash.pm:                    if($test->parameters->type eq "perfsonarbuoy/bwctl"){
../lib/perfSONAR_PS/MeshConfig/Generators/MaDDash.pm:                        $graph_options .= "&protocol=" . $test->parameters->protocol if($test->parameters->protocol);
../lib/perfSONAR_PS/MeshConfig/Generators/MaDDash.pm:                        $graph_custom_filters .= "bw-target-bandwidth:" . $test->parameters->udp_bandwidth if($test->parameters->udp_bandwidth);
../lib/perfSONAR_PS/MeshConfig/Generators/MaDDash.pm:                        my $filter_tool_name = __get_check_option({ option => "filter_tool_name", test_type => $test->parameters->type, grid_name => $grid_name, maddash_options => $maddash_options });
../lib/perfSONAR_PS/MeshConfig/Generators/MaDDash.pm:                        if($filter_tool_name && $test->parameters->tool){
../lib/perfSONAR_PS/MeshConfig/Generators/MaDDash.pm:                            $graph_options .= "&tool=" . $test->parameters->tool;
../lib/perfSONAR_PS/MeshConfig/Generators/MaDDash.pm:                    my $custom_ma_filters = __get_check_option({ option => "ma_filter", test_type => $test->parameters->type, grid_name => $grid_name, maddash_options => $maddash_options });
../lib/perfSONAR_PS/MeshConfig/Generators/MaDDash.pm:                            unless(exists $test->parameters->{$custom_ma_filter->{'mesh_parameter_name'}} 
../lib/perfSONAR_PS/MeshConfig/Generators/MaDDash.pm:                                    && defined $test->parameters->{$custom_ma_filter->{'mesh_parameter_name'}} ){
../lib/perfSONAR_PS/MeshConfig/Generators/MaDDash.pm:                           $graph_custom_filters .= $custom_ma_filter->{'ma_filter_name'} . ':' . $test->parameters->{$custom_ma_filter->{'mesh_parameter_name'}}; 
../lib/perfSONAR_PS/MeshConfig/Generators/MaDDash.pm:            my $check = __build_check(grid_name => $grid_name, test_params => $test->parameters, ma_map => \%forward_ma_map, exclude_checks => \%forward_exclude_checks, direction => "forward", maddash_options => $maddash_options, is_full_mesh => $is_full_mesh, graph_map => \%forward_graph_map);
../lib/perfSONAR_PS/MeshConfig/Generators/MaDDash.pm:            if($test->parameters->force_bidirectional){
../lib/perfSONAR_PS/MeshConfig/Generators/MaDDash.pm:                my $rev_check = __build_check(grid_name => $grid_name, test_params => $test->parameters, ma_map => \%reverse_ma_map, exclude_checks => \%reverse_exclude_checks, direction => "reverse", maddash_options => $maddash_options, is_full_mesh => $is_full_mesh, graph_map => \%reverse_graph_map);
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:            next if ($test->added_by_mesh);
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:        if ($test->disabled) {
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:            $logger->debug("Skipping disabled test: ".$test->description);
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:        $logger->debug("Adding: ".$test->description);
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:        if ($test->has_unknown_attributes) {
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:            die("Test '".$test->description."' has unknown attributes: ".join(", ", keys %{ $test->get_unknown_attributes }));
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:        if ($test->parameters->has_unknown_attributes) {
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:            die("Test '".$test->description."' has unknown test parameters: ".join(", ", keys %{ $test->parameters->get_unknown_attributes }));
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:            foreach my $pair (@{ $test->members->source_destination_pairs }) {
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:                    my %duplicate_params = %{$test->parameters->unparse()};
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:                        ($test->parameters->can("force_bidirectional") and $test->parameters->force_bidirectional) or
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:                        ($test->parameters->type eq "traceroute" or $test->parameters->type eq "ping")) {
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:                        ($test->parameters->can("force_bidirectional") and $test->parameters->force_bidirectional) or
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:                        ($test->parameters->type ne "traceroute" or $test->parameters->type ne "ping")) {
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:            $test_types{$test->parameters->type} = 1;
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:            die("Problem adding test ".$test->description.": ".$@);
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:        $test_obj->description($test->description) if $test->description;
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:        if ($test->parameters->type eq "pinger") {
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:            $parameters->packet_count($test->parameters->packet_count) if $test->parameters->packet_count;
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:            $parameters->packet_length($test->parameters->packet_size) if $test->parameters->packet_size;
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:            $parameters->packet_ttl($test->parameters->packet_ttl) if $test->parameters->packet_ttl;
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:            $parameters->inter_packet_time($test->parameters->packet_interval) if $test->parameters->packet_interval;
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:            $parameters->force_ipv4($test->parameters->ipv4_only) if $test->parameters->ipv4_only;
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:            $parameters->force_ipv6($test->parameters->ipv6_only) if $test->parameters->ipv6_only;
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:            $schedule->interval($test->parameters->test_interval);
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:            $schedule->random_start_percentage($test->parameters->random_start_percentage) if(defined $test->parameters->random_start_percentage);
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:        elsif ($test->parameters->type eq "traceroute") {
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:            $parameters->packet_length($test->parameters->packet_size) if $test->parameters->packet_size;
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:            $parameters->packet_first_ttl($test->parameters->first_ttl) if $test->parameters->first_ttl;
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:            $parameters->packet_max_ttl($test->parameters->max_ttl) if $test->parameters->max_ttl;
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:            $parameters->force_ipv4($test->parameters->ipv4_only) if $test->parameters->ipv4_only;
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:            $parameters->force_ipv6($test->parameters->ipv6_only) if $test->parameters->ipv6_only;
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:            $parameters->tool($test->parameters->tool) if $test->parameters->tool;
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:            $schedule->interval($test->parameters->test_interval) if $test->parameters->test_interval;
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:            $schedule->random_start_percentage($test->parameters->random_start_percentage) if(defined $test->parameters->random_start_percentage);
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:        elsif ($test->parameters->type eq "perfsonarbuoy/bwctl") {
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:            if($test->parameters->tool){
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:                my $tool = $test->parameters->tool;
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:            $parameters->use_udp($test->parameters->protocol eq "udp"?1:0);
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:            # $test{parameters}->{streams}  = $test->parameters->streams; # XXX: needs to support streams
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:            $parameters->duration($test->parameters->duration) if $test->parameters->duration;
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:            $parameters->omit_interval($test->parameters->omit_interval) if $test->parameters->omit_interval;
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:            $parameters->udp_bandwidth($test->parameters->udp_bandwidth) if $test->parameters->udp_bandwidth;
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:            $parameters->buffer_length($test->parameters->buffer_length) if $test->parameters->buffer_length;
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:            $parameters->packet_tos_bits($test->parameters->tos_bits) if $test->parameters->tos_bits;
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:            $parameters->streams($test->parameters->streams) if $test->parameters->streams;
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:            $parameters->window_size($test->parameters->window_size) if $test->parameters->window_size;
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:            $parameters->latest_time($test->parameters->latest_time) if $test->parameters->latest_time;
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:            $parameters->force_ipv4($test->parameters->ipv4_only) if $test->parameters->ipv4_only;
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:            $parameters->force_ipv6($test->parameters->ipv6_only) if $test->parameters->ipv6_only;
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:            $schedule->interval($test->parameters->interval) if $test->parameters->interval;
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:            $schedule->random_start_percentage($test->parameters->random_start_percentage) if(defined $test->parameters->random_start_percentage);
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:        elsif ($test->parameters->type eq "perfsonarbuoy/owamp") {
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:                $parameters->packet_count(25/$test->parameters->packet_interval) if($test->parameters->packet_interval);
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:                $parameters->resolution($test->parameters->sample_count * $test->parameters->packet_interval) if $test->parameters->sample_count * $test->parameters->packet_interval;
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:            $parameters->inter_packet_time($test->parameters->packet_interval) if($test->parameters->packet_interval);
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:            $parameters->packet_length($test->parameters->packet_padding) if($test->parameters->packet_padding);
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:            $parameters->force_ipv4($test->parameters->ipv4_only) if $test->parameters->ipv4_only;
../lib/perfSONAR_PS/MeshConfig/Generators/perfSONARRegularTesting.pm:            $parameters->force_ipv6($test->parameters->ipv6_only) if $test->parameters->ipv6_only;
../lib/perfSONAR_PS/MeshConfig/Config/Mesh.pm:        my $pairs = $test->members->source_destination_pairs;
../lib/perfSONAR_PS/MeshConfig/Config/Mesh.pm:            die("Test '".$test->description."' does not have any hosts that can actually perform the test");
../lib/perfSONAR_PS/MeshConfig/Config/Mesh.pm:        my $pairs = $test->members->source_destination_pairs;
../lib/perfSONAR_PS/MeshConfig/Config/Group.pm:    my $mesh = $test->parent;
../lib/perfSONAR_PS/MeshConfig/Config/Test.pm:        # If there's not a test-specific MA, lookup the host associated with the
../lib/perfSONAR_PS/MeshConfig/Config/Test.pm:        # If there's not a test-specific MA, lookup the host associated with the
../lib/perfSONAR_PS/MeshConfig/Utils.pm:            my $group = $test->{group};
../lib/perfSONAR_PS/MeshConfig/Utils.pm:            my $test_spec = $test->{test_spec};
../lib/perfSONAR_PS/MeshConfig/Utils.pm:            delete($test->{group});
../lib/perfSONAR_PS/MeshConfig/Utils.pm:            delete($test->{test_spec});
../lib/perfSONAR_PS/MeshConfig/Utils.pm:            if ($test->{parameters}) {
../lib/perfSONAR_PS/MeshConfig/Utils.pm:                for my $param (keys %{ $test->{parameters} }) {
../lib/perfSONAR_PS/MeshConfig/Utils.pm:                    $test_spec{$param} = $test->{parameters}->{$param};
../lib/perfSONAR_PS/MeshConfig/Utils.pm:            $test->{parameters} = \%test_spec;
../lib/perfSONAR_PS/MeshConfig/Utils.pm:            $test->{members}    = \%group;
../lib/perfSONAR_PS/MeshConfig/Utils.pm:            if ($test->{no_agents}) {
../lib/perfSONAR_PS/MeshConfig/Utils.pm:                $test->{members}->{no_agents} = $test->{no_agents};
../lib/perfSONAR_PS/MeshConfig/Utils.pm:                delete($test->{no_agents});
../lib/perfSONAR_PS/MeshConfig/Statistic.pm:			my $tool = $test->parameters->type;
../lib/perfSONAR_PS/MeshConfig/Statistic.pm:			$self->__build_src_dst_hashmap(\%statistics_tree, $tool, $test->members->source_destination_pairs);
